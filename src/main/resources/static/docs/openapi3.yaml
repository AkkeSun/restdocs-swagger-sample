openapi: 3.0.1
info:
  title: restdocs test
  description: restdocs + swagger 테스트
  version: 0.0.1
servers:
- url: http://localhost:8080
  description: local
- url: https://prodServer:8119
  description: prod
tags: []
paths:
  /user:
    get:
      tags:
      - USER API
      summary: 사용자 이름 조회 API
      description: 사용자 이름 조회 API
      operationId: findUserInfo/successgetUserInfo/notFoundUserInfo
      parameters:
      - name: id
        in: query
        description: 사용자 아이디
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/사용자 이름 조회 API 응답 스키마'
              examples:
                getUserInfo/notFoundUserInfo:
                  value: |-
                    {
                      "code" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMsg" : "사용자 정보를 찾을 수 없습니다"
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/사용자 이름 조회 API 응답 스키마'
              examples:
                findUserInfo/success:
                  value: |-
                    {
                      "code" : 200,
                      "message" : "OK",
                      "data" : {
                        "name" : "od"
                      }
                    }
    post:
      tags:
      - USER API
      summary: 사용자 등록 API
      description: 사용자 등록 API
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/사용자 등록 API 요청 파라미터 스키마'
            examples:
              createUser:
                value: |-
                  {
                    "name" : "exg",
                    "age" : 34
                  }
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/사용자 등록 API 응답 스키마'
              examples:
                createUser:
                  value: |-
                    {
                      "code" : 201,
                      "message" : "CREATED",
                      "data" : {
                        "result" : true
                      }
                    }
components:
  schemas:
    사용자 등록 API 응답 스키마:
      title: 사용자 등록 API 응답 스키마
      required:
      - code
      - data
      - message
      type: object
      properties:
        code:
          type: number
          description: 상태코드
        data:
          required:
          - result
          type: object
          properties:
            result:
              type: boolean
              description: 결과
          description: 응답 데이터
        message:
          type: string
          description: 상태메시지
    사용자 이름 조회 API 응답 스키마:
      title: 사용자 이름 조회 API 응답 스키마
      required:
      - code
      - data
      - message
      type: object
      properties:
        code:
          type: number
          description: 상태코드
        data:
          required:
          - errorCode
          - errorMsg
          type: object
          properties:
            errorCode:
              type: number
              description: 에러코드
            errorMsg:
              type: string
              description: 에러메시지
          description: 응답 데이터
        message:
          type: string
          description: 상태메시지
    사용자 등록 API 요청 파라미터 스키마:
      title: 사용자 등록 API 요청 파라미터 스키마
      required:
      - age
      - name
      type: object
      properties:
        name:
          type: string
          description: 사용자 이름
        age:
          type: number
          description: 사용자 나이
